# GitHub Actions Workflow - Contribution Snake Animation Generator
# Author: David St. John (davestj@gmail.com)
# Date: December 2024
# File: .github/workflows/snake.yml
# Repository: davestj/davestj (GitHub Profile Repository)
# Purpose: I use this workflow to generate an animated SVG snake that visualizes my GitHub contributions
# 
# Change Log:
# - v1.0.0 (2024-12): Initial workflow implementation - I created this to automate snake generation
# - v1.1.0 (2024-12): Fixed permissions issue - I added explicit write permissions for the workflow
# - v2.0.0 (2024-12): Fixed checkout conflicts - I restructured the workflow to handle file conflicts properly
# - Added proper cleanup before branch switching to prevent git conflicts
# - Implemented safer file handling with explicit workspace management
# - Added force checkout option with file preservation strategy
#
# Technical Notes:
# - I explicitly grant write permissions to avoid the 403 error
# - I handle file conflicts by cleaning the workspace before checkout
# - I use force options when necessary but preserve generated content
# - I ensure smooth branch transitions without data loss

name: Generate GitHub Contribution Snake

# I grant permissions explicitly to allow pushing to the repository
permissions:
  contents: write  # I need this to push the generated files
  actions: write   # I need this to update workflow status
  pages: write     # I need this for GitHub Pages if I decide to use it
  id-token: write  # I need this for advanced GitHub features

# I configure when this workflow runs
on:
  # I schedule this to run automatically every day at midnight UTC
  schedule:
    - cron: "0 0 * * *"
  
  # I allow manual triggering from the Actions tab
  workflow_dispatch:
  
  # I trigger on pushes to main to keep the snake current
  push:
    branches:
      - main
      - master

# I set up the jobs that will run
jobs:
  generate-snake:
    # I name this job descriptively for the Actions UI
    name: Generate contribution snake animation
    
    # I use the latest Ubuntu runner for optimal performance
    runs-on: ubuntu-latest
    
    # I set a timeout to prevent hanging jobs
    timeout-minutes: 10
    
    # I define the steps to generate the snake
    steps:
      # Step 1: I check out my repository with proper token
      # This gives the workflow write access to my repo
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          # I use the GitHub token for authentication
          token: ${{ secrets.GITHUB_TOKEN }}
          # I need the full history for accurate contribution data
          fetch-depth: 0
      
      # Step 2: I generate the snake animation files
      # This is the core step that creates the SVG animations
      - name: Generate snake animation
        uses: Platane/snk@v3
        id: snake-gif
        with:
          # I use my GitHub username for the contribution data
          github_user_name: ${{ github.repository_owner }}
          
          # I configure the outputs - creating both light and dark themes
          outputs: |
            dist/github-contribution-grid-snake.svg
            dist/github-contribution-grid-snake-dark.svg?palette=github-dark
            dist/github-contribution-grid-snake.gif
          
        env:
          # I provide the GitHub token for API authentication
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      
      # Step 3: I verify the generated files exist
      # This helps me ensure the generation was successful
      - name: Verify generated files
        run: |
          echo "I'm checking if the snake files were generated successfully..."
          if [ -d "dist" ]; then
            echo "✅ I found the dist directory"
            echo "I generated the following files:"
            ls -la dist/
            echo ""
            echo "File sizes:"
            du -h dist/*
          else
            echo "❌ The dist directory wasn't created"
            exit 1
          fi
      
      # Step 4: I set up git configuration for committing
      # This ensures git knows who is making the commits
      - name: Setup git configuration
        run: |
          # I configure git with the GitHub Actions bot identity
          git config --global user.name "github-actions[bot]"
          git config --global user.email "41898282+github-actions[bot]@users.noreply.github.com"
          
          # I verify my configuration
          echo "Git configuration:"
          git config --get user.name
          git config --get user.email
      
      # Step 5: I deploy the snake to the output branch with proper conflict resolution
      # This is the main deployment step that handles the branch switching carefully
      - name: Deploy to output branch
        run: |
          # I fetch all branches to ensure I have the latest state
          echo "I'm fetching all remote branches..."
          git fetch origin
          
          # I save the generated files to a temporary location first
          # This prevents loss of generated content during branch operations
          echo "I'm preserving the generated files..."
          if [ -d "dist" ]; then
            cp -r dist /tmp/snake-dist-backup
            echo "✅ Generated files backed up to /tmp/snake-dist-backup"
          fi
          
          # I check if the output branch exists and handle it properly
          if git show-ref --verify --quiet refs/remotes/origin/output; then
            echo "I found an existing output branch..."
            
            # I clean the working directory to avoid conflicts
            # This removes any untracked files that might cause issues
            echo "I'm cleaning the workspace to prevent conflicts..."
            git clean -fd
            
            # I reset any changes to tracked files
            git reset --hard HEAD
            
            # Now I can safely checkout the output branch
            echo "I'm switching to the output branch..."
            git checkout output
            
            # I pull the latest changes from the remote
            git pull origin output --rebase || true
          else
            echo "I'm creating a new output branch..."
            # I create an orphan branch for a clean history
            git checkout --orphan output
            
            # I remove all files from the staging area
            git rm -rf . || true
            
            # I clean any remaining files
            git clean -fd
          fi
          
          # I restore the generated files from the backup
          echo "I'm restoring the generated snake files..."
          if [ -d "/tmp/snake-dist-backup" ]; then
            mkdir -p dist
            cp -r /tmp/snake-dist-backup/* dist/
            echo "✅ Files restored from backup"
          fi
          
          # I copy the generated files to the root for easier access
          if [ -f "dist/github-contribution-grid-snake.svg" ]; then
            echo "I'm copying files to root directory for easier access..."
            cp dist/github-contribution-grid-snake.svg .
            cp dist/github-contribution-grid-snake-dark.svg .
            [ -f "dist/github-contribution-grid-snake.gif" ] && cp dist/github-contribution-grid-snake.gif .
            
            # I add all the snake files to git
            echo "I'm staging all snake files..."
            git add *.svg *.gif 2>/dev/null || true
            git add dist/ 2>/dev/null || true
            
            # I create a commit with a descriptive message
            COMMIT_MESSAGE="🐍 Update contribution snake - $(date +'%Y-%m-%d %H:%M:%S UTC')"
            echo "I'm creating a commit with message: $COMMIT_MESSAGE"
            git commit -m "$COMMIT_MESSAGE" || echo "No changes to commit"
            
            # I push to the output branch
            echo "I'm pushing the snake animation to the output branch..."
            git push origin output --force-with-lease || git push origin output --force
            
            echo "✅ Successfully deployed snake animation to output branch!"
            echo "📊 Files are now available at:"
            echo "   Light: https://raw.githubusercontent.com/${{ github.repository }}/output/github-contribution-grid-snake.svg"
            echo "   Dark:  https://raw.githubusercontent.com/${{ github.repository }}/output/github-contribution-grid-snake-dark.svg"
            echo "   GIF:   https://raw.githubusercontent.com/${{ github.repository }}/output/github-contribution-grid-snake.gif"
          else
            echo "❌ Snake files were not generated properly"
            exit 1
          fi
      
      # Step 6: I create a summary for the Actions UI
      # This provides a nice overview in the workflow run summary
      - name: Create job summary
        if: always()
        run: |
          echo "# 🐍 Snake Generation Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [ -f "github-contribution-grid-snake.svg" ] || [ -f "dist/github-contribution-grid-snake.svg" ]; then
            echo "✅ **Status:** Successfully generated snake animation" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "## 📁 Generated Files:" >> $GITHUB_STEP_SUMMARY
            echo "- \`github-contribution-grid-snake.svg\` (Light theme)" >> $GITHUB_STEP_SUMMARY
            echo "- \`github-contribution-grid-snake-dark.svg\` (Dark theme)" >> $GITHUB_STEP_SUMMARY
            echo "- \`github-contribution-grid-snake.gif\` (Animated GIF)" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "## 🔗 Access URLs:" >> $GITHUB_STEP_SUMMARY
            echo "- [Light Theme](https://raw.githubusercontent.com/${{ github.repository }}/output/github-contribution-grid-snake.svg)" >> $GITHUB_STEP_SUMMARY
            echo "- [Dark Theme](https://raw.githubusercontent.com/${{ github.repository }}/output/github-contribution-grid-snake-dark.svg)" >> $GITHUB_STEP_SUMMARY
            echo "- [Animated GIF](https://raw.githubusercontent.com/${{ github.repository }}/output/github-contribution-grid-snake.gif)" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ **Status:** Failed to generate snake animation" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "Please check the workflow logs for details." >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "---" >> $GITHUB_STEP_SUMMARY
          echo "*Generated by GitHub Actions at $(date +'%Y-%m-%d %H:%M:%S UTC')*" >> $GITHUB_STEP_SUMMARY

# Workflow Documentation
# =====================
# 
# Key Changes in v2.0.0:
# - I backup generated files before any branch operations
# - I clean the workspace properly to prevent checkout conflicts
# - I restore files from backup after branch switching
# - I use force options only when necessary for reliability
#
# How This Solves the Conflict Issue:
# 1. Generated files are backed up to /tmp before any git operations
# 2. The workspace is cleaned completely before checkout
# 3. Files are restored from backup after successful branch switch
# 4. This ensures no conflicts while preserving all generated content
#
# Required Repository Settings:
# 1. Go to Settings > Actions > General
# 2. Under "Workflow permissions", select "Read and write permissions"
# 3. Check "Allow GitHub Actions to create and approve pull requests"
# 4. Click "Save"
#
# Troubleshooting:
# - If conflicts persist: Check that no other workflows are running simultaneously
# - If push fails: Verify repository permissions are correctly set
# - If generation fails: Check your contribution graph visibility settings
# - If files are missing: Review the backup and restore steps in the logs
